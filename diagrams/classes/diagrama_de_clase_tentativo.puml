@startuml
'https://plantuml.com/class-diagram

class Arania {
    -vida: Vida
    -danio: int
    -velocidad: int
    -creditos: Creditos
    +Arania()
}

class Camino {
    -pasarelas: ArrayList<Pasarela>
    -meta: Pasarela
    +Camino(Pasarela meta)
    +agregarPasarela((Pasarela pasarela): void
    +mover(Jugador jugador): void
    +siguiente(Enemigo enemigo, Pasarela pasarela, Jugador jugador): void
    +tieneEnemigos(): bool
    +gano(Jugador jugador): bool
    +perdio(Jugador jugador): bool
}

class Coordenadas {
    -x: int
    -y: int
    +Coordenadas(int x, int y)
    +distacia(Coordenadas other): int
}

class Creditos {
    -cantidad: int
    +Creditos(int cantidadCreditos)
    +cantidad(): int
    +sacarCreditos(Creditos creditos): void
    +agregarCreditos(Creditos creditos): void
}

class CreditosInsuficientesError {}

abstract class Defensa {
    -danio: int
    -rango: int
    -turnosRestantes: int
    -coste: Creditos
    +estaOperativa(): bool
    +atacar(): void
    +rangoMaximo(): int
    +danioGenerado(): int
    +coste(): Creditos
}

abstract class Enemigo {
    -vida: Vida
    -danio: int
    -creditos: Creditos
    +recibirDanio(Defensa defensa): void
    +estaMuerto(): bool
    +getVelocidad(): int
    +atacar(Jugador jugador): void
    +obtenerCreditos(): Creditos
}

class Hormiga {
    -vida: Vida
    -danio: int
    -velocidad: int
    -creditos: Creditos
    +Hormiga()
    +setCreditos(Creditos creditos)
}

class Jugador {
    -nombre: String
    -vida: Vida
    -creditos: Creditos
    +vida(): int
    +getCreditos(): int
    +sacarCreditos(Creditos creditos): void
    +estaMuerto(): bool
    +recibirDanio(int danio): void
    +recibirCreditos(Creditos creditos): void
}

class Meta {
    +Meta(Coordenadas ubicacion)
    +ubicar(Enemigo enemigo, Jugador jugador): bool
}

abstract class Parcela {
    -ubicacion: Coordenadas
    +ubicar(Defensa defensa, Jugador jugador): bool
    +ubicar(Enemigo enemigo, Jugador jugador): bool
    +defender(Parcela parcela): bool
    +atacado(Defensa defensa, Parcela parcela): bool
    +distacia(Parcela other): int
}

class Pasarela {
    -enemigos: ArrayList<Enemigo>
    +Pasarela(Coordenadas other)
    +Pasarela()
    +ubicar(Defensa defensa, Jugador jugador): bool
    +ubicar(Enemigo enemigo, Jugador jugador): bool
    +atacado(Defensa defensa, Parcela ubicacionDefensa): bool
    +mover(Camino camino, Jugador jugador): void
    +esta(Enemigo enemigo): bool
    +estaVacia(): bool
}

class Rocoso {
    +Rocoso(Coordenadas ubicacion)
    +Rocoso()
    +ubicar(Defensa defensa, Jugador jugador): bool
    +ubicar(Enemigo enemigo, Jugador jugador): bool
}

class Score {}

class Tierra {
    -defensa: Defensa
    +Tierra(Coordenadas ubicacion)
    +Tierra()
    +ubicar(Enemigo enemigo, Jugador jugador): bool
    +ubicar(): bool
    +estaOcupada(): bool
    +defender(Parcela lugar): bool
}


class TorreBlanca {
    -danio: int
    -rango: int
    -turnosRestantes: int
    -coste: Creditos
    +TorreBlanca()
}

class TorrePlateada {
    -danio: int
    -rango: int
    -turnosRestantes: int
    -coste: Creditos
    +TorrePlateada()
    +atacar(): void
}

class Turno {
    -numero: int
    -jugador: Jugador
    -camino: Camino
    +siguienteTurno(Parcela parcela, Enemigo nuevoEnemigo): void
}

class Vida {
    -cantidad: int
    +Vida(int cantidadVida)
    +Equals(Vida other): bool
    +quitar(int danio): void
    +estaMuerto(): bool
    +vida(): int
}

class App {
    +main(String[] args): void
    +start(Stage stage): void
}

class Main {
    +main(String[] args): void
}

class SystemInfi {
    +javaVersion(): String
    +javafxVersion(): String
}

Jugador *-- Vida
Jugador *-- Creditos

Defensa --> Creditos

TorreBlanca --|> Defensa
TorrePlateada --|> Defensa

Pasarela --|> Parcela

Parcela ..> Defensa
Parcela ..> Jugador
Parcela o-- Coordenadas
Parcela ..> Enemigo

Meta --|> Pasarela

Parcela <|-- Rocoso
Parcela <|-- Tierra

Camino --> Pasarela
Camino --> Meta
Camino ..> Jugador
Camino ..> Enemigo


Enemigo --> Vida
Enemigo --> Creditos
Enemigo ..> Defensa
Enemigo --> Jugador

Hormiga --|> Enemigo
Arania --|> Enemigo

Creditos *-- CreditosInsuficientesError



@enduml